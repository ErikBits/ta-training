name: Github Actions Webshop App Demo
run-name: ${{ github.actor }} testing github actions
on: [push]
jobs:
  run-backend-unit-tests:
    runs-on: ubuntu-latest
    services: 
      mysql-container:
        image: mysql:latest
        env:
          MYSQL_DATABASE: ta_test_db
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpw
          MYSQL_ROOT_PASSWORD: rootpw
          MYSQL_PORT: 3306
        ports:
          - 3306:3306
        # Before continuing, verify the mysql container is reachable from the ubuntu host
        # options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        volumes:
          - ./local-app/mysql-db/init.sql:/docker-entrypoint-initdb.d/init.sql
    steps:
    # - run: chmod -R 777 /home/runner/work/ta-training/ta-training
    # - uses: actions/checkout@v4
      - run: cp -r . /app
      - run: ls

    # - name: Install node.js deps
    #   run: cd local-app/express-backend && npm install
    
    # - name: run backend server in background
    #   run: cd local-app/express-backend && node server.js &
    
    # - name: run backend tests
    #   run: cd local-app/express-backend && npm run test

    # - run: echo "${{ github.repository }} has been cloned to runner"
    # - run: echo "workflow ready to test code on hte runner"
    # - name: list files in repo
    #   run: |
    #     ls ${{ github.workspace }}
    # - run: echo "job status is ${{ job.status }}"
    # - name: clone repo
    #   run: |
    #     git clone https://github.com/luukschn/ta-training

    # - name: setup node
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: '20.x'
    #     cache: npm

    # - name: install dependencies
    #   working-directory: ./local-app/express-backend
    #   run: npm install

    # - name: run backend server in background
    #   working-directory: ./local-app/express-backend
    #   run: node server.js &

    # - run: ps

    # - name: identify PID for backend server
    #   run: |
    #     server_pid=$(pgrep -f 'node server.js')
    #     echo "server PID: $server_pid"

    # - name: run backend tests
    #   working-directory: ./local-app/express-backend
    #   run: npm run test

    # # Move down
    # - name: kill backend server
    #   if: always()
    #   run: |
    #     if [[ -n "$server_pid" ]]; then
    #       kill -2 "$server_pid"
    #     else
    #       echo "server pid not found, may already have exited"
    #     fi

    # - run: echo "job status is ${{ job.status }}"



    #frontend unittests
    # - name: install frontend unittest dependencies
    #   working-directory: local-app/react-frontend/
    #   run: npm install
    # - name: run frontend unit tests
    #   working-directory: local-app/react-frontend/
    #   run: npm run test

    
    # run API tests
    # - name: activate venv API integration tests
    #   working-directory: test-automation-training/API-testing/API-testing-python-requests/
    #   run: venv\Scripts\activate
    # - name: install dependencies API integration tests
    #   working-directory: test-automation-training/API-testing/API-testing-python-requests/
    #   run: pip install requirements.txt
    # - name: run API integration tests
    #   working-directory: test-automation-training/API-testing/API-testing-python-requests/
    #   run: python3 API_testing.py
    # - name: deactivate venv
    #   working-directory: test-automation-training/API-testing/API-testing-pythong-requests/
    #   run: deactivate


    # start frontend
    # - name: install frontend deps
    #   working-directory: local-app/react-frontend/
    #   run: npm install
    # - name: run frontend
    #   working-directory: local-app/react-frontend/
    #   run: npm run start &
    
    #save frontend PID

    

    # run E2E integration tests
    # - name: install E2E integration tests dependencies
    #   working-directory: test-automation-training/E2E-test-with-playwright/
    #   run: npm install
    # - name: execute E2E tests
    #   working-directory: test-automation-training/E2E-test-with-playwright/
    #   run: |
    #     npx playwright test tests/6-functional_tasks/6.0-verifying_products_page.spec.ts 
      #what are the exact tests I can run here?
    







      # - name: list files in repo
      #   run: | 
      #     ls ${{ github.workspace }}
      # - run: pwd
      # # - name: install dependencies backend/
      #   # run: cd local-app/express-backend/
      # - name: install dependencies
      #   run: npm install
      #   working-directory: local-app/express-backend/
      # - name: run server
      #   run: node server.js
      #   working-directory: local-app/express-backend/
      # - name: execute tests
      #   run: npm run test
      #   working-directory: local-app/express-backend/





  # explore-github-actions:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: 
  #     - name: check out repository code
  #       uses: actions/checkout@v4
  #     - run: echo "${{ github.repository }} has been cloned to runner"
  #     - run: echo "workflow ready to test code on hte runner"
  #     - name: list files in repo
  #       run: |
  #         ls ${{ github.workspace }}
  #     - run: echo "job status is ${{ job.status }}"